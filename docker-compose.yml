services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=development
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000
      - WDS_SOCKET_PORT=0
      - GENERATE_SOURCEMAP=false
      - DISABLE_ESLINT_PLUGIN=true
      - FAST_REFRESH=true
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    depends_on:
      - api

  api:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    volumes:
      - ./backend/api:/app/api
      - model_cache:/app/models_cache
      - model_offload:/app/models_cache/offload
      - uploads:/app/uploads
    ports:
      - "8000:8000"
    depends_on:
      - db
    deploy:
      resources:
        limits:
          memory: ${MAX_RAM_USAGE:-2G}
        reservations:
          memory: ${MIN_RAM_USAGE:-1G}
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - FLASK_APP=app.py
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - PYTHONPATH=/app/api
      - MODEL_CACHE_DIR=/app/models_cache
      - MODEL_WEIGHTS_OFFLOAD_DIR=/app/models_cache/offload
      - HUGGINGFACE_CACHE=/app/models_cache/huggingface
      - TRANSFORMERS_CACHE=/app/models_cache/transformers
      - HF_HUB_CACHE=/app/models_cache/huggingface
      - HF_HOME=/app/models_cache/huggingface
      - SAFETENSORS_FAST_GPU=1
      - OMP_NUM_THREADS=1
      - PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:32
      - TRANSFORMERS_OFFLINE=0
      - HF_HUB_DISABLE_TELEMETRY=1
      - HF_HUB_DISABLE_SYMLINKS_WARNING=1
      - HF_HUB_DISABLE_EXPERIMENTAL_WARNING=1
      - HF_HUB_DISABLE_IMPLICIT_TOKEN=1
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    command: postgres -c shared_buffers=256MB -c max_connections=200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
  model_cache:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/models_cache
      o: bind
  model_offload:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/models_cache/offload
      o: bind
  frontend_node_modules:
    driver: local
  uploads:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/uploads
      o: bind
